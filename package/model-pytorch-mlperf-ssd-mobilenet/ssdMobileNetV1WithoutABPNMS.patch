diff --git a/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py
index dc77808..ab9c0d9 100644
--- a/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py
+++ b/vision/classification_and_detection/python/models/ssd_mobilenet_v1.py
@@ -10,6 +10,7 @@ from models.utils import BatchNorm2d
 from models.utils import BiasAdd
 from models.utils import nms
 from models.utils import decode_boxes
+import argparse


 def conv_bn(inp, oup, stride):
@@ -152,6 +153,8 @@ class SSD(nn.Module):
         scores = torch.sigmoid(class_logits)
         box_regression = box_regression.squeeze(0)

+        return scores, box_regression
+
         shapes = [o.shape[-2:] for o in feature_maps]
         if shapes != self._feature_map_shapes:
             # generate anchors for the sizes of the feature map
@@ -175,6 +178,8 @@ class SSD(nn.Module):
         """

         scores, boxes = self.ssd_model(images)
+
+        return scores, boxes
         list_boxes=[]; list_labels=[]; list_scores=[]
         for b in range(len(scores)):
             bboxes, blabels, bscores = self.filter_results(scores[b], boxes[b])
@@ -247,7 +252,23 @@ def get_tf_pretrained_mobilenet_ssd(weights_file):
     from models.convert_tf_weights import get_state_dict, read_tf_weights

     model = create_mobilenetv1_ssd(91)
-    weights = read_tf_weights(weights_file)
-    state_dict = get_state_dict(weights)
-    model.load_state_dict(state_dict)
-    return model
+    weights = torch.load(weights_file, map_location='cpu').state_dict()
+    model.load_state_dict(weights)
+    from torch.autograd import Variable
+    inp = Variable(torch.randn(1, 3, 300, 300))
+    for param in model.parameters():
+        param.requires_grad = False
+    model = model.eval()
+    torch.onnx.export(model, inp, 'SSDMobileNetV1_300_300_Without_ABP_NMS.onnx', opset_version=11)
+    print("ONNX Model Without ABP_NMS is generated")
+    #return model
+
+if __name__ == "__main__":
+    parser = argparse.ArgumentParser(description="MobileNetSSDV1 Model Generation")
+    parser.add_argument('--input_model',
+                        required=True,
+                        type=str,
+                        default='./default.pytorch',
+                        help="Pytorch weight file Path")
+    args = parser.parse_args()
+    get_tf_pretrained_mobilenet_ssd(args.input_model)
\ No newline at end of file
